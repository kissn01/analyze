// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.yoooum.tars.account;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TTopicDocInfo {

	@TarsStructProperty(order = 0, isRequire = false)
	public int itopicitemid = 0;
	@TarsStructProperty(order = 1, isRequire = false)
	public java.util.List<java.lang.Short> vectopicdoc = null;
	@TarsStructProperty(order = 2, isRequire = false)
	public byte cover = (byte)0;

	public int getItopicitemid() {
		return itopicitemid;
	}

	public void setItopicitemid(int itopicitemid) {
		this.itopicitemid = itopicitemid;
	}

	public java.util.List<java.lang.Short> getVectopicdoc() {
		return vectopicdoc;
	}

	public void setVectopicdoc(java.util.List<java.lang.Short> vectopicdoc) {
		this.vectopicdoc = vectopicdoc;
	}

	public byte getCover() {
		return cover;
	}

	public void setCover(byte cover) {
		this.cover = cover;
	}

	public TTopicDocInfo() {
	}

	public TTopicDocInfo(int itopicitemid, java.util.List<java.lang.Short> vectopicdoc, byte cover) {
		this.itopicitemid = itopicitemid;
		this.vectopicdoc = vectopicdoc;
		this.cover = cover;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(itopicitemid);
		result = prime * result + TarsUtil.hashCode(vectopicdoc);
		result = prime * result + TarsUtil.hashCode(cover);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TTopicDocInfo)) {
			return false;
		}
		TTopicDocInfo other = (TTopicDocInfo) obj;
		return (
			TarsUtil.equals(itopicitemid, other.itopicitemid) &&
			TarsUtil.equals(vectopicdoc, other.vectopicdoc) &&
			TarsUtil.equals(cover, other.cover) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(itopicitemid, 0);
		if (null != vectopicdoc) {
			_os.write(vectopicdoc, 1);
		}
		_os.write(cover, 2);
	}

	static java.util.List<java.lang.Short> cache_vectopicdoc;
	static { 
		cache_vectopicdoc = new java.util.ArrayList<java.lang.Short>();
		short var_20 = (short)0;
		cache_vectopicdoc.add(var_20);
	}

	public void readFrom(TarsInputStream _is) {
		this.itopicitemid = _is.read(itopicitemid, 0, false);
		this.vectopicdoc = (java.util.List<java.lang.Short>) _is.read(cache_vectopicdoc, 1, false);
		this.cover = _is.read(cover, 2, false);
	}

}
