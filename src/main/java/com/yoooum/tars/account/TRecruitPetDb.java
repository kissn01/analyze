// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.yoooum.tars.account;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TRecruitPetDb {

	@TarsStructProperty(order = 0, isRequire = false)
	public short npetid = (short)0;
	@TarsStructProperty(order = 1, isRequire = false)
	public short ntimes = (short)0;
	@TarsStructProperty(order = 2, isRequire = false)
	public short cstatus = (short)0;
	@TarsStructProperty(order = 3, isRequire = false)
	public boolean bchip = false;

	public short getNpetid() {
		return npetid;
	}

	public void setNpetid(short npetid) {
		this.npetid = npetid;
	}

	public short getNtimes() {
		return ntimes;
	}

	public void setNtimes(short ntimes) {
		this.ntimes = ntimes;
	}

	public short getCstatus() {
		return cstatus;
	}

	public void setCstatus(short cstatus) {
		this.cstatus = cstatus;
	}

	public boolean getBchip() {
		return bchip;
	}

	public void setBchip(boolean bchip) {
		this.bchip = bchip;
	}

	public TRecruitPetDb() {
	}

	public TRecruitPetDb(short npetid, short ntimes, short cstatus, boolean bchip) {
		this.npetid = npetid;
		this.ntimes = ntimes;
		this.cstatus = cstatus;
		this.bchip = bchip;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(npetid);
		result = prime * result + TarsUtil.hashCode(ntimes);
		result = prime * result + TarsUtil.hashCode(cstatus);
		result = prime * result + TarsUtil.hashCode(bchip);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TRecruitPetDb)) {
			return false;
		}
		TRecruitPetDb other = (TRecruitPetDb) obj;
		return (
			TarsUtil.equals(npetid, other.npetid) &&
			TarsUtil.equals(ntimes, other.ntimes) &&
			TarsUtil.equals(cstatus, other.cstatus) &&
			TarsUtil.equals(bchip, other.bchip) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(npetid, 0);
		_os.write(ntimes, 1);
		_os.write(cstatus, 2);
		_os.write(bchip, 3);
	}


	public void readFrom(TarsInputStream _is) {
		this.npetid = _is.read(npetid, 0, false);
		this.ntimes = _is.read(ntimes, 1, false);
		this.cstatus = _is.read(cstatus, 2, false);
		this.bchip = _is.read(bchip, 3, false);
	}

}
