// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.yoooum.tars.account;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TActiveCodeDb {

	@TarsStructProperty(order = 0, isRequire = false)
	public java.util.Map<String, java.util.List<TActiveBatchDb>> mActiveBatchDb = null;

	public java.util.Map<String, java.util.List<TActiveBatchDb>> getMActiveBatchDb() {
		return mActiveBatchDb;
	}

	public void setMActiveBatchDb(java.util.Map<String, java.util.List<TActiveBatchDb>> mActiveBatchDb) {
		this.mActiveBatchDb = mActiveBatchDb;
	}

	public TActiveCodeDb() {
	}

	public TActiveCodeDb(java.util.Map<String, java.util.List<TActiveBatchDb>> mActiveBatchDb) {
		this.mActiveBatchDb = mActiveBatchDb;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(mActiveBatchDb);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TActiveCodeDb)) {
			return false;
		}
		TActiveCodeDb other = (TActiveCodeDb) obj;
		return (
			TarsUtil.equals(mActiveBatchDb, other.mActiveBatchDb) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		if (null != mActiveBatchDb) {
			_os.write(mActiveBatchDb, 0);
		}
	}

	static java.util.Map<String, java.util.List<TActiveBatchDb>> cache_mActiveBatchDb;
	static { 
		cache_mActiveBatchDb = new java.util.HashMap<String, java.util.List<TActiveBatchDb>>();
		String var_2 = "";
		java.util.List<TActiveBatchDb> var_3 = new java.util.ArrayList<TActiveBatchDb>();
		TActiveBatchDb var_4 = new TActiveBatchDb();
		var_3.add(var_4);
		cache_mActiveBatchDb.put(var_2 ,var_3);
	}

	public void readFrom(TarsInputStream _is) {
		this.mActiveBatchDb = (java.util.Map<String, java.util.List<TActiveBatchDb>>) _is.read(cache_mActiveBatchDb, 0, false);
	}

}
