// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.yoooum.tars.account;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TTradeItemInfo {

	@TarsStructProperty(order = 0, isRequire = false)
	public int iitemid = 0;
	@TarsStructProperty(order = 1, isRequire = false)
	public long icount = 0L;
	@TarsStructProperty(order = 2, isRequire = false)
	public byte icointype = (byte)0;
	@TarsStructProperty(order = 3, isRequire = false)
	public long iprice = 0L;

	public int getIitemid() {
		return iitemid;
	}

	public void setIitemid(int iitemid) {
		this.iitemid = iitemid;
	}

	public long getIcount() {
		return icount;
	}

	public void setIcount(long icount) {
		this.icount = icount;
	}

	public byte getIcointype() {
		return icointype;
	}

	public void setIcointype(byte icointype) {
		this.icointype = icointype;
	}

	public long getIprice() {
		return iprice;
	}

	public void setIprice(long iprice) {
		this.iprice = iprice;
	}

	public TTradeItemInfo() {
	}

	public TTradeItemInfo(int iitemid, long icount, byte icointype, long iprice) {
		this.iitemid = iitemid;
		this.icount = icount;
		this.icointype = icointype;
		this.iprice = iprice;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(iitemid);
		result = prime * result + TarsUtil.hashCode(icount);
		result = prime * result + TarsUtil.hashCode(icointype);
		result = prime * result + TarsUtil.hashCode(iprice);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TTradeItemInfo)) {
			return false;
		}
		TTradeItemInfo other = (TTradeItemInfo) obj;
		return (
			TarsUtil.equals(iitemid, other.iitemid) &&
			TarsUtil.equals(icount, other.icount) &&
			TarsUtil.equals(icointype, other.icointype) &&
			TarsUtil.equals(iprice, other.iprice) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(iitemid, 0);
		_os.write(icount, 1);
		_os.write(icointype, 2);
		_os.write(iprice, 3);
	}


	public void readFrom(TarsInputStream _is) {
		this.iitemid = _is.read(iitemid, 0, false);
		this.icount = _is.read(icount, 1, false);
		this.icointype = _is.read(icointype, 2, false);
		this.iprice = _is.read(iprice, 3, false);
	}

}
