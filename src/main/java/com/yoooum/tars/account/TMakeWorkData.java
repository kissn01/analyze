// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.yoooum.tars.account;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TMakeWorkData {

	@TarsStructProperty(order = 0, isRequire = false)
	public int iformulationid = 0;
	@TarsStructProperty(order = 1, isRequire = false)
	public byte cstatus = (byte)0;
	@TarsStructProperty(order = 2, isRequire = false)
	public java.util.List<TPropDbInfo> veccontent = null;

	public int getIformulationid() {
		return iformulationid;
	}

	public void setIformulationid(int iformulationid) {
		this.iformulationid = iformulationid;
	}

	public byte getCstatus() {
		return cstatus;
	}

	public void setCstatus(byte cstatus) {
		this.cstatus = cstatus;
	}

	public java.util.List<TPropDbInfo> getVeccontent() {
		return veccontent;
	}

	public void setVeccontent(java.util.List<TPropDbInfo> veccontent) {
		this.veccontent = veccontent;
	}

	public TMakeWorkData() {
	}

	public TMakeWorkData(int iformulationid, byte cstatus, java.util.List<TPropDbInfo> veccontent) {
		this.iformulationid = iformulationid;
		this.cstatus = cstatus;
		this.veccontent = veccontent;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(iformulationid);
		result = prime * result + TarsUtil.hashCode(cstatus);
		result = prime * result + TarsUtil.hashCode(veccontent);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TMakeWorkData)) {
			return false;
		}
		TMakeWorkData other = (TMakeWorkData) obj;
		return (
			TarsUtil.equals(iformulationid, other.iformulationid) &&
			TarsUtil.equals(cstatus, other.cstatus) &&
			TarsUtil.equals(veccontent, other.veccontent) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(iformulationid, 0);
		_os.write(cstatus, 1);
		if (null != veccontent) {
			_os.write(veccontent, 2);
		}
	}

	static java.util.List<TPropDbInfo> cache_veccontent;
	static { 
		cache_veccontent = new java.util.ArrayList<TPropDbInfo>();
		TPropDbInfo var_75 = new TPropDbInfo();
		cache_veccontent.add(var_75);
	}

	public void readFrom(TarsInputStream _is) {
		this.iformulationid = _is.read(iformulationid, 0, false);
		this.cstatus = _is.read(cstatus, 1, false);
		this.veccontent = (java.util.List<TPropDbInfo>) _is.read(cache_veccontent, 2, false);
	}

}
